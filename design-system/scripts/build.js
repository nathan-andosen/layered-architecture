const chokidar = require('chokidar');
const path = require('path');
const argv = require('yargs').argv;
const spawn = require('child_process').spawn;

const ROOT_DIR = path.join(__dirname, '..');
const SRC_DIR = path.join(ROOT_DIR, 'src');
const watch = (argv.w) ? true : false;
let isRunningBuild = false;
let runBuildQueue = [];


/**
 * Clean the build queue
 *
 */
const cleanQueue = () => {
  if (runBuildQueue.length > 0) {
    runBuildQueue[0]();
    runBuildQueue = [];
  }
};


/**
 * Run the stencil build
 *
 * @returns
 */
const runBuild = () => {
  isRunningBuild = true;
  return new Promise((resolve, reject) => {
    if (watch) process.env.NODE_ENV = 'dev';
    const params = (watch) ? ['build'] : ['build', '--docs'];
    let cmd = './node_modules/.bin/stencil';
    if (process.platform === 'win32') cmd = 'bash ' + cmd;
    const subProcess = spawn('./node_modules/.bin/stencil', params, {
      stdio: 'inherit',
      cwd: ROOT_DIR,
      shell: (process.platform === 'win32')
    });
    subProcess.on('exit', function(code) {
      if (watch) console.log('waiting...');
      isRunningBuild = false;
      resolve();
      cleanQueue();
    });
    subProcess.on('error', function(code) {
      isRunningBuild = false;
      reject(new Error('Build error: ' + code.toString()));
      cleanQueue();
    });
  });
};


/**
 * Start the build, or add the build to the queue if a build is in progress
 *
 * @returns
 */
const startBuild = () => {
  if (isRunningBuild && runBuildQueue.length === 0) {
    runBuildQueue.push(runBuild);
    return;
  }
  runBuild();
};


/**
 * Run the build once
 *
 */
const singleRunBuild = async () => {
  try {
    await runBuild();
    console.log('Build complete...');
  } catch(err) {
    throw err;
  }
};


/**
 * Execute this script
 *
 * @returns
 */
const executeScript = () => {
  if (watch) {
    const watcher = chokidar.watch(SRC_DIR);
    watcher.on('ready', () => {
      runBuild();
    });
    watcher.on('change', (changedFilePath) => {
      const autoGeneratedFilePath = path.join(SRC_DIR, 'components.d.ts');
      if (isRunningBuild && autoGeneratedFilePath === changedFilePath) return;
      startBuild();
    });
    return;
  }
  singleRunBuild();
};


executeScript();